
== Component Lifecycle

The key idea behind this approach is a decomposition of individual modules
(training a model on a given data split, or applying the model to unknown
data) into common phases such as a set up phase, an execution phase and a
cleanup phase.
Example actions which may be performed in each such phase are, e.g., running (reusable) sanity checks of
components used in the modules. As an example, consider the usage of a JVM while training a model and applying it to unknown data.
In such a scenario, a useful reusable action would be to check whether the JVM
is launchable given the current configuration, or whether it likely gets
killed due to excessive memory usage.

== Definition of phases

The following phases are yet defined:

. on_init optional; may be used to perform short-running initialization actions, e.g., checking the availability of tools (on compute nodes) or verifying that the environment is sufficient to perform certain kinds of actions.
. on_run mandatory; is used to perform the 'actual' work.
. on_abort optional; is called only if the on_run function returns a non-zero return value (implicitly the last return value of the last command called in the on_run function)
. on_success optional; is called only if the on_run function returns a value
of zero (implicitly the last return value of the last command called in the
on_run function)
. on_exit optional; always called just before the actual script finishes.

Figure X visualized the dependencies.
image:./figure/lifecycle/component_state.svg

The lifecycle is managed by the function guarded_run defined in
lifecycleutils.sh. This needs to be sourced in scripts using the lifecycle
approach (see example below).

When migrating to the proposed lifecycle handling, it is usually sufficient
to:
. include the lifecycleutils.sh definitions,
. encapsulate the currently existing code into a function named on_run(),
. call the function guarded_run at the very end of the script using the
lifecycle.

//guarded_run implements the lifecycle handling as described above.


== Example use case

An example use case for using the component lifecycle approach is the usage of
the JVM as a 'target', as realized within the script
scripts/targets/target_java.sh.
If defines several functions, including those from the lifecycle handling
approach.
In detail, it defines the following functions (as of 2014-06-01):

. java_generate_opts used to generate dynamic JVM options such as memory
values (Xmx, ...) and classpath options
. run_java is a substitute for the 'java' command used to launch the JVM. It
adds dynamic JVM options (e.g., those generated by java_generate_opts).
. on_init is an initializtation function used by this lifecycle framework. It
is used to check whether the JVM is launchable using the previously defined
functions (run_java and java_generate_opts).
. run_bootstrap_java is a specific function used to call Bootstrap modules
(see https://github.com/busche/bootstrap). It merely fixed the main-class to
be de.ismll.bootstrap.Console

A module using / implementing the lifecycle approach is then defined, e.g., by the following script:

----
#!/bin/bash

# include function definitions for running java programs
. target_java.sh

# include lifecycle utilities
. lifecycleutils.sh

# define a function on_run to be executed during the lifecycle
function on_run() {

	run_java my.Mainclass arg1 arg2
	# no explicit return value: the implicit return value is that of the
	# JVM.
}

# start the lifecycle by iterating through individual phases of the defined
# lifecycle.
guarded_run 

----

By inclusion of target_java.sh, the on_init function is defined. This results
in a check whether of not the JVM is executable at all in the on_run function.
By inclusion of lifecycleutils.sh, the lifecycle functions are included into
the current script context. 

